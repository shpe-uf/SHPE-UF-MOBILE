{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\nvar _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\SHPE-UF-MOBILE\\\\Pages\\\\CodeButton.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  query getUser($userId: ID!) {\\n    getUser(userId: $userId) {\\n      firstName\\n      lastName\\n      points\\n      fallPoints\\n      springPoints\\n      summerPoints\\n      fallPercentile\\n      springPercentile\\n      summerPercentile\\n      events {\\n        name\\n        category\\n        createdAt\\n        points\\n      }\\n      tasks {\\n        name\\n        points\\n        startDate\\n      }\\n      bookmarkedTasks\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useContext } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport { useMutation, useQuery, gql } from \"@apollo/client\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport Constants from \"expo-constants\";\n\nfunction CodeButton(_ref) {\n  var user = _ref.user;\n\n  if (user) {\n    console.log(user);\n  }\n\n  return React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, user.firstName);\n}\n\nvar FETCH_USER_QUERY = gql(_templateObject());\nexport default CodeButton;","map":{"version":3,"sources":["C:/Users/hp/Desktop/SHPE-UF-MOBILE/Pages/CodeButton.js"],"names":["React","useState","useContext","useMutation","useQuery","gql","useForm","Controller","Constants","CodeButton","user","console","log","firstName","FETCH_USER_QUERY"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;;;;;;;;;AAEA,SAASC,WAAT,EAAsBC,QAAtB,EAAgCC,GAAhC,QAA2C,gBAA3C;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,iBAApC;AACA,OAAOC,SAAP,MAAsB,gBAAtB;;AAEA,SAASC,UAAT,OAA8B;AAAA,MAARC,IAAQ,QAARA,IAAQ;;AAC5B,MAAIA,IAAJ,EAAS;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACD;;AACD,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOA,IAAI,CAACG,SAAZ,CADF;AAGD;;AAED,IAAMC,gBAAgB,GAAGT,GAAH,mBAAtB;AAkKA,eAAeI,UAAf","sourcesContent":["import React, { useState, useContext } from 'react';\r\nimport { Text, View, StyleSheet, TextInput, Button, Alert, Modal, TouchableHighlight } from \"react-native\";\r\nimport { useMutation, useQuery, gql } from \"@apollo/client\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport Constants from \"expo-constants\";\r\n\r\nfunction CodeButton({ user }) {\r\n  if (user){\r\n    console.log(user);\r\n  }\r\n  return (\r\n    <Text>{user.firstName}</Text>\r\n  )\r\n}\r\n\r\nconst FETCH_USER_QUERY = gql`\r\n  query getUser($userId: ID!) {\r\n    getUser(userId: $userId) {\r\n      firstName\r\n      lastName\r\n      points\r\n      fallPoints\r\n      springPoints\r\n      summerPoints\r\n      fallPercentile\r\n      springPercentile\r\n      summerPercentile\r\n      events {\r\n        name\r\n        category\r\n        createdAt\r\n        points\r\n      }\r\n      tasks {\r\n        name\r\n        points\r\n        startDate\r\n      }\r\n      bookmarkedTasks\r\n    }\r\n  }\r\n`;\r\n/*Isabel made a button. So, the idea should be that when her button is clicked\r\nit goes to my redeem code form*/\r\n// function CodeButton() {\r\n//   const {\r\n//     register,\r\n//     setValue,\r\n//     handleSubmit,\r\n//     control,\r\n//     reset,\r\n//     errors,\r\n//   } = useForm();\r\n//   const onSubmit = (data) => {\r\n//     console.log(data);\r\n//   };\r\n//\r\n//   const onChange = (arg) => {\r\n//     return {\r\n//       value: arg.nativeEvent.text,\r\n//     };\r\n//   };\r\n//\r\n//   console.log(errors);\r\n//\r\n//   const [modalVisible, setModalVisible] = useState(false);\r\n//\r\n//   return (\r\n//     <View style={styles.container}>\r\n//       <Modal\r\n//         animationType=\"slide\"\r\n//         transparent={true}\r\n//         visible={modalVisible}\r\n//         onRequestClose={() => {\r\n//           Alert.alert(\"Modal has been closed.\");\r\n//         }}\r\n//       >\r\n//         <Text style={styles.label}>Enter code:</Text>\r\n//         <Controller\r\n//           control={control}\r\n//           render={({ onChange, onBlur, value }) => (\r\n//             <TextInput\r\n//               style={styles.input}\r\n//               onBlur={onBlur}\r\n//               onChangeText={(value) => onChange(value)}\r\n//               value={value}\r\n//             />\r\n//           )}\r\n//           name=\"code\"\r\n//           rules={{ required: true }}\r\n//         />\r\n//\r\n//         <View style={styles.button}>\r\n//           <Button\r\n//             style={styles.buttonInner}\r\n//             color\r\n//             title=\"Submit\"\r\n//             onPress={handleSubmit(onSubmit)}\r\n//           />\r\n//         </View>\r\n//\r\n//         <View style={styles.button}>\r\n//           <Button\r\n//             style={styles.buttonInner}\r\n//             color\r\n//             title=\"Cancel\"\r\n//             onPress={() => {\r\n//               setModalVisible(!modalVisible);\r\n//               reset({\r\n//                 code: \"\",\r\n//               });\r\n//             }}\r\n//           />\r\n//         </View>\r\n//       </Modal>\r\n//\r\n//       <TouchableHighlight\r\n//         style={styles.button}\r\n//         onPress={() => {\r\n//           setModalVisible(true);\r\n//         }}\r\n//       >\r\n//         <Text style={styles.textStyle}>Redeem Code</Text>\r\n//       </TouchableHighlight>\r\n//     </View>\r\n//   );\r\n// }\r\n//\r\n// const styles = StyleSheet.create({\r\n//   label: {\r\n//     color: \"white\",\r\n//     margin: 20,\r\n//     marginLeft: 0,\r\n//   },\r\n//   modalView: {\r\n//   margin: 20,\r\n//   backgroundColor: \"white\",\r\n//   borderRadius: 20,\r\n//   padding: 35,\r\n//   alignItems: \"center\",\r\n//   shadowColor: \"#000\",\r\n//   shadowOffset: {\r\n//     width: 0,\r\n//     height: 2\r\n//   },\r\n//   shadowOpacity: 0.25,\r\n//   shadowRadius: 3.84,\r\n//   elevation: 5\r\n//   },\r\n//   button: {\r\n//     marginTop: 40,\r\n//     color: \"white\",\r\n//     height: 40,\r\n//     backgroundColor: \"#42A5F5\",\r\n//     borderRadius: 20,\r\n//   },\r\n//   container: {\r\n//     flex: 1,\r\n//     justifyContent: \"center\",\r\n//     paddingTop: Constants.statusBarHeight,\r\n//     padding: 8,\r\n//     backgroundColor: \"#004D73\",\r\n//   },\r\n//   input: {\r\n//     backgroundColor: \"white\",\r\n//     height: 40,\r\n//     padding: 10,\r\n//     borderRadius: 4,\r\n//   },\r\n//   textStyle: {\r\n//     padding: 8,\r\n//     color: \"white\",\r\n//     fontWeight: \"bold\",\r\n//     textAlign: \"center\"\r\n//   },\r\n// });\r\n\r\nexport default CodeButton;\r\n"]},"metadata":{},"sourceType":"module"}