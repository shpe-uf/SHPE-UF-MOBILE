{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\nvar _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\SHPE-UF-MOBILE\\\\Pages\\\\CodeButton.js\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  mutation redeemPoints($code: String!, $username: String!) {\\n    redeemPoints(redeemPointsInput: { code: $code, username: $username }) {\\n      points\\n      fallPoints\\n      springPoints\\n      summerPoints\\n      message\\n      events {\\n        id\\n        name\\n        category\\n        createdAt\\n        points\\n      }\\n      tasks {\\n        name\\n        points\\n        createdAt\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  query getUser($userId: ID!) {\\n    getUser(userId: $userId) {\\n      firstName\\n      lastName\\n      points\\n      fallPoints\\n      springPoints\\n      summerPoints\\n      fallPercentile\\n      springPercentile\\n      summerPercentile\\n      events {\\n        name\\n        category\\n        createdAt\\n        points\\n      }\\n      tasks {\\n        name\\n        points\\n        startDate\\n      }\\n      bookmarkedTasks\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useContext } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport { useMutation, useQuery, gql } from \"@apollo/client\";\nimport { useForm, getErrors } from \"../util/hooks\";\nimport { Controller } from \"react-hook-form\";\nimport Constants from \"expo-constants\";\n\nfunction CodeButton() {\n  var _useQuery = useQuery(FETCH_USER_QUERY, {\n    variables: {\n      userId: \"5f90e4d4920bab09f6df0106\"\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data,\n      refetch = _useQuery.refetch;\n\n  if (loading) return null;\n  if (error) return \"Error! \" + error;\n  refetch();\n  return React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, \"nothing\");\n}\n\nvar styles = StyleSheet.create({\n  label: {\n    color: \"black\",\n    margin: 10,\n    marginLeft: 0\n  },\n  header: {\n    color: \"#ff5400\",\n    fontSize: 30,\n    fontWeight: \"bold\",\n    fontStyle: \"italic\",\n    margin: 10,\n    marginLeft: 0\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: \"white\",\n    borderRadius: 20,\n    padding: 30,\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5\n  },\n  button: {\n    marginTop: 10,\n    marginLeft: 20,\n    marginRight: 20,\n    color: \"white\",\n    height: 40,\n    backgroundColor: \"#42A5F5\",\n    borderRadius: 20\n  },\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    paddingTop: Constants.statusBarHeight,\n    padding: 8,\n    backgroundColor: \"#004D73\"\n  },\n  input: {\n    backgroundColor: \"white\",\n    height: 40,\n    padding: 10,\n    borderRadius: 4,\n    borderWidth: 1,\n    borderColor: \"#c8c8c8\"\n  },\n  textStyle: {\n    padding: 8,\n    color: \"white\",\n    fontWeight: \"bold\",\n    textAlign: \"center\"\n  }\n});\nvar FETCH_USER_QUERY = gql(_templateObject());\nvar REDEEM_POINTS_MUTATION = gql(_templateObject2());\nexport default CodeButton;","map":{"version":3,"sources":["C:/Users/hp/Desktop/SHPE-UF-MOBILE/Pages/CodeButton.js"],"names":["React","useState","useContext","useMutation","useQuery","gql","useForm","getErrors","Controller","Constants","CodeButton","FETCH_USER_QUERY","variables","userId","loading","error","data","refetch","styles","StyleSheet","create","label","color","margin","marginLeft","header","fontSize","fontWeight","fontStyle","modalView","backgroundColor","borderRadius","padding","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","button","marginTop","marginRight","container","flex","justifyContent","paddingTop","statusBarHeight","input","borderWidth","borderColor","textStyle","textAlign","REDEEM_POINTS_MUTATION"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;;;;;;;;;AAWA,SAASC,WAAT,EAAsBC,QAAtB,EAAgCC,GAAhC,QAA2C,gBAA3C;AACA,SAASC,OAAT,EAAkBC,SAAlB;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,OAAOC,SAAP,MAAsB,gBAAtB;;AAEA,SAASC,UAAT,GAAsB;AAAA,kBAUsBN,QAAQ,CAACO,gBAAD,EAAmB;AACnEC,IAAAA,SAAS,EAAE;AACTC,MAAAA,MAAM,EAAE;AADC;AADwD,GAAnB,CAV9B;AAAA,MAUZC,OAVY,aAUZA,OAVY;AAAA,MAUHC,KAVG,aAUHA,KAVG;AAAA,MAUIC,IAVJ,aAUIA,IAVJ;AAAA,MAUUC,OAVV,aAUUA,OAVV;;AAgBpB,MAAIH,OAAJ,EAAa,OAAO,IAAP;AACb,MAAIC,KAAJ,EAAW,mBAAiBA,KAAjB;AACXE,EAAAA,OAAO;AACP,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF;AAGD;;AA0GD,IAAMC,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE,OADF;AAELC,IAAAA,MAAM,EAAE,EAFH;AAGLC,IAAAA,UAAU,EAAE;AAHP,GADwB;AAM/BC,EAAAA,MAAM,EAAE;AACNH,IAAAA,KAAK,EAAE,SADD;AAENI,IAAAA,QAAQ,EAAE,EAFJ;AAGNC,IAAAA,UAAU,EAAE,MAHN;AAINC,IAAAA,SAAS,EAAE,QAJL;AAKNL,IAAAA,MAAM,EAAE,EALF;AAMNC,IAAAA,UAAU,EAAE;AANN,GANuB;AAc/BK,EAAAA,SAAS,EAAE;AACTN,IAAAA,MAAM,EAAE,EADC;AAETO,IAAAA,eAAe,EAAE,OAFR;AAGTC,IAAAA,YAAY,EAAE,EAHL;AAITC,IAAAA,OAAO,EAAE,EAJA;AAMTC,IAAAA,WAAW,EAAE,MANJ;AAOTC,IAAAA,YAAY,EAAE;AACZC,MAAAA,KAAK,EAAE,CADK;AAEZC,MAAAA,MAAM,EAAE;AAFI,KAPL;AAWTC,IAAAA,aAAa,EAAE,IAXN;AAYTC,IAAAA,YAAY,EAAE,IAZL;AAaTC,IAAAA,SAAS,EAAE;AAbF,GAdoB;AA6B/BC,EAAAA,MAAM,EAAE;AACNC,IAAAA,SAAS,EAAE,EADL;AAENjB,IAAAA,UAAU,EAAE,EAFN;AAGNkB,IAAAA,WAAW,EAAE,EAHP;AAINpB,IAAAA,KAAK,EAAE,OAJD;AAKNc,IAAAA,MAAM,EAAE,EALF;AAMNN,IAAAA,eAAe,EAAE,SANX;AAONC,IAAAA,YAAY,EAAE;AAPR,GA7BuB;AAsC/BY,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,cAAc,EAAE,QAFP;AAGTC,IAAAA,UAAU,EAAErC,SAAS,CAACsC,eAHb;AAITf,IAAAA,OAAO,EAAE,CAJA;AAKTF,IAAAA,eAAe,EAAE;AALR,GAtCoB;AA6C/BkB,EAAAA,KAAK,EAAE;AACLlB,IAAAA,eAAe,EAAE,OADZ;AAELM,IAAAA,MAAM,EAAE,EAFH;AAGLJ,IAAAA,OAAO,EAAE,EAHJ;AAILD,IAAAA,YAAY,EAAE,CAJT;AAKLkB,IAAAA,WAAW,EAAE,CALR;AAMLC,IAAAA,WAAW,EAAE;AANR,GA7CwB;AAqD/BC,EAAAA,SAAS,EAAE;AACTnB,IAAAA,OAAO,EAAE,CADA;AAETV,IAAAA,KAAK,EAAE,OAFE;AAGTK,IAAAA,UAAU,EAAE,MAHH;AAITyB,IAAAA,SAAS,EAAE;AAJF;AArDoB,CAAlB,CAAf;AA6DA,IAAMzC,gBAAgB,GAAGN,GAAH,mBAAtB;AA4BA,IAAMgD,sBAAsB,GAAGhD,GAAH,oBAA5B;AAwBA,eAAeK,UAAf","sourcesContent":["import React, { useState, useContext } from \"react\";\r\nimport {\r\n  Text,\r\n  View,\r\n  StyleSheet,\r\n  TextInput,\r\n  Button,\r\n  Alert,\r\n  Modal,\r\n  TouchableHighlight,\r\n} from \"react-native\";\r\nimport { useMutation, useQuery, gql } from \"@apollo/client\";\r\nimport { useForm, getErrors } from \"../util/hooks\";\r\nimport { Controller } from \"react-hook-form\";\r\nimport Constants from \"expo-constants\";\r\n\r\nfunction CodeButton() {\r\n  // let {data, refetch} = useQuery(FETCH_USER_QUERY, {\r\n  //     variables: {\r\n  //       userId: \"5f90e4d4920bab09f6df0106\"\r\n  //     }\r\n  // });\r\n  // if(data){\r\n  //   let user = data.getUser;\r\n  //   console.log(user);\r\n  // }\r\n  const { loading, error, data, refetch } = useQuery(FETCH_USER_QUERY, {\r\n    variables: {\r\n      userId: \"5f90e4d4920bab09f6df0106\"\r\n    }\r\n  });\r\n\r\n  if (loading) return null;\r\n  if (error) return `Error! ${error}`;\r\n  refetch();\r\n  return (\r\n    <Text>nothing</Text>\r\n  )\r\n}\r\n// function CodeButton() {\r\n//   //const [errors, setErrors] = useState({});\r\n//\r\n//   let {data, refetch} = useQuery(FETCH_USER_QUERY, {\r\n//     variables: {\r\n//       userId: \"5f90e4d4920bab09f6df0106\"\r\n//     }\r\n//   });\r\n//   if(data){\r\n//     let user = data.getUser;\r\n//   }\r\n//\r\n//   const {\r\n//     register,\r\n//     setValue,\r\n//     //handleSubmit,\r\n//     control,\r\n//     reset,\r\n//     errors,\r\n//   } = useForm(/*redeemPointsCallback, {\r\n//     code: \"\",\r\n//     username: username\r\n//   }*/);\r\n//   //\r\n//   const onSubmit = (data) => {\r\n//     console.log(data);\r\n//     setModalVisible(!modalVisible);\r\n//     /*in here, we have the code. What we need is to use the use the Mutation\r\n//     and put data as the code*/\r\n//   };\r\n//   //\r\n//   // const onChange = (arg) => {\r\n//   //   return {\r\n//   //     value: arg.nativeEvent.text,\r\n//   //   };\r\n//   // };\r\n//   //\r\n//   // console.log(errors);\r\n//   //\r\n//   const [modalVisible, setModalVisible] = useState(false);\r\n//\r\n//   return (\r\n//     <View style={styles.container}>\r\n//       <Modal\r\n//         animationType=\"slide\"\r\n//         transparent={true}\r\n//         visible={modalVisible}\r\n//         onRequestClose={() => {\r\n//           // values.code = \"\";\r\n//           // setErrors(false);\r\n//           setModalVisible(!modalVisible);\r\n//           Alert.alert(\"Modal has been closed.\");\r\n//         }}\r\n//       >\r\n//         <View style={styles.modalView}>\r\n//           <Text style={styles.header}>Redeem Points</Text>\r\n//           <Text style={styles.label}>Enter code:</Text>\r\n//           <Controller\r\n//             control={control}\r\n//             render={({ onChange, onBlur, value }) => (\r\n//               <TextInput\r\n//                 style={styles.input}\r\n//                 onBlur={onBlur}\r\n//                 onChangeText={(value) => onChange(value)}\r\n//                 value={value}\r\n//               />\r\n//             )}\r\n//             name=\"code\"\r\n//             rules={{ required: true }}\r\n//             defaultValue = \"\"\r\n//           />\r\n//\r\n//           <TouchableHighlight\r\n//             style={styles.button}\r\n//             onPress={console.log(\"something\")}\r\n//           >\r\n//             <Text style={styles.textStyle}>Submit</Text>\r\n//           </TouchableHighlight>\r\n//\r\n//           <TouchableHighlight\r\n//             style={styles.button}\r\n//             onPress={() => {\r\n//               setModalVisible(!modalVisible);\r\n//               reset({\r\n//                 code: \"\",\r\n//               });\r\n//             }}\r\n//           >\r\n//             <Text style={styles.textStyle}>Cancel</Text>\r\n//           </TouchableHighlight>\r\n//         </View>\r\n//       </Modal>\r\n//\r\n//       <TouchableHighlight\r\n//         style={styles.button}\r\n//         onPress={() => {\r\n//           setModalVisible(true);\r\n//         }}\r\n//       >\r\n//         <Text style={styles.textStyle}>Redeem Code</Text>\r\n//       </TouchableHighlight>\r\n//     </View>\r\n//   );\r\n// }\r\n\r\nconst styles = StyleSheet.create({\r\n  label: {\r\n    color: \"black\",\r\n    margin: 10,\r\n    marginLeft: 0,\r\n  },\r\n  header: {\r\n    color: \"#ff5400\",\r\n    fontSize: 30,\r\n    fontWeight: \"bold\",\r\n    fontStyle: \"italic\",\r\n    margin: 10,\r\n    marginLeft: 0,\r\n  },\r\n  modalView: {\r\n    margin: 20,\r\n    backgroundColor: \"white\",\r\n    borderRadius: 20,\r\n    padding: 30,\r\n    //alignItems: \"center\",\r\n    shadowColor: \"#000\",\r\n    shadowOffset: {\r\n      width: 0,\r\n      height: 2,\r\n    },\r\n    shadowOpacity: 0.25,\r\n    shadowRadius: 3.84,\r\n    elevation: 5,\r\n  },\r\n  button: {\r\n    marginTop: 10,\r\n    marginLeft: 20,\r\n    marginRight: 20,\r\n    color: \"white\",\r\n    height: 40,\r\n    backgroundColor: \"#42A5F5\",\r\n    borderRadius: 20,\r\n  },\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    paddingTop: Constants.statusBarHeight,\r\n    padding: 8,\r\n    backgroundColor: \"#004D73\",\r\n  },\r\n  input: {\r\n    backgroundColor: \"white\",\r\n    height: 40,\r\n    padding: 10,\r\n    borderRadius: 4,\r\n    borderWidth: 1,\r\n    borderColor: \"#c8c8c8\"\r\n  },\r\n  textStyle: {\r\n    padding: 8,\r\n    color: \"white\",\r\n    fontWeight: \"bold\",\r\n    textAlign: \"center\",\r\n  },\r\n});\r\n\r\nconst FETCH_USER_QUERY = gql`\r\n  query getUser($userId: ID!) {\r\n    getUser(userId: $userId) {\r\n      firstName\r\n      lastName\r\n      points\r\n      fallPoints\r\n      springPoints\r\n      summerPoints\r\n      fallPercentile\r\n      springPercentile\r\n      summerPercentile\r\n      events {\r\n        name\r\n        category\r\n        createdAt\r\n        points\r\n      }\r\n      tasks {\r\n        name\r\n        points\r\n        startDate\r\n      }\r\n      bookmarkedTasks\r\n    }\r\n  }\r\n`;\r\n\r\nconst REDEEM_POINTS_MUTATION = gql`\r\n  mutation redeemPoints($code: String!, $username: String!) {\r\n    redeemPoints(redeemPointsInput: { code: $code, username: $username }) {\r\n      points\r\n      fallPoints\r\n      springPoints\r\n      summerPoints\r\n      message\r\n      events {\r\n        id\r\n        name\r\n        category\r\n        createdAt\r\n        points\r\n      }\r\n      tasks {\r\n        name\r\n        points\r\n        createdAt\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default CodeButton;\r\n"]},"metadata":{},"sourceType":"module"}