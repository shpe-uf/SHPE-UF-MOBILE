{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\SHPE-UF-MOBILE\\\\Pages\\\\CodeButton.js\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  mutation redeemPoints($code: String!, $username: String!) {\\n    redeemPoints(redeemPointsInput: { code: $code, username: $username }) {\\n      points\\n      fallPoints\\n      springPoints\\n      summerPoints\\n      message\\n      events {\\n        id\\n        name\\n        category\\n        createdAt\\n        points\\n      }\\n      tasks {\\n        name\\n        points\\n        createdAt\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  query getUser($userId: ID!) {\\n    getUser(userId: $userId) {\\n      firstName\\n      lastName\\n      points\\n      fallPoints\\n      springPoints\\n      summerPoints\\n      fallPercentile\\n      springPercentile\\n      summerPercentile\\n      events {\\n        name\\n        category\\n        createdAt\\n        points\\n      }\\n      tasks {\\n        name\\n        points\\n        startDate\\n      }\\n      bookmarkedTasks\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useContext } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport { useMutation, useQuery, gql } from \"@apollo/client\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport Constants from \"expo-constants\";\n\nfunction CodeButton() {\n  var _this = this;\n\n  var _useQuery = useQuery(FETCH_USER_QUERY, {\n    variables: {\n      userId: \"5f90e4d4920bab09f6df0106\"\n    }\n  }),\n      data = _useQuery.data,\n      refetch = _useQuery.refetch;\n\n  if (data) {\n    var user = data.getUser;\n    console.log(user);\n  }\n\n  var _useForm = useForm(),\n      register = _useForm.register,\n      setValue = _useForm.setValue,\n      handleSubmit = _useForm.handleSubmit,\n      control = _useForm.control,\n      reset = _useForm.reset,\n      errors = _useForm.errors;\n\n  var onSubmit = function onSubmit(data) {\n    console.log(data);\n    setModalVisible(!modalVisible);\n  };\n\n  var onChange = function onChange(arg) {\n    return {\n      value: arg.nativeEvent.text\n    };\n  };\n\n  console.log(errors);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      modalVisible = _useState2[0],\n      setModalVisible = _useState2[1];\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, React.createElement(Modal, {\n    animationType: \"slide\",\n    transparent: true,\n    visible: modalVisible,\n    onRequestClose: function onRequestClose() {\n      setModalVisible(!modalVisible);\n      Alert.alert(\"Modal has been closed.\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.modalView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, \"Redeem Points\"), React.createElement(Text, {\n    style: styles.label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  }, \"Enter code:\"), React.createElement(Controller, {\n    control: control,\n    render: function render(_ref) {\n      var onChange = _ref.onChange,\n          onBlur = _ref.onBlur,\n          value = _ref.value;\n      return React.createElement(TextInput, {\n        style: styles.input,\n        onBlur: onBlur,\n        onChangeText: function onChangeText(value) {\n          return onChange(value);\n        },\n        value: value,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 15\n        }\n      });\n    },\n    name: \"code\",\n    rules: {\n      required: true\n    },\n    defaultValue: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }), errors.firstName && React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 32\n    }\n  }, \"No code was provided.\"), React.createElement(TouchableHighlight, {\n    style: styles.button,\n    onPress: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: styles.textStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }\n  }, \"Submit\")), React.createElement(TouchableHighlight, {\n    style: styles.button,\n    onPress: function onPress() {\n      setModalVisible(!modalVisible);\n      reset({\n        code: \"\"\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: styles.textStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }, \"Cancel\")))), React.createElement(TouchableHighlight, {\n    style: styles.button,\n    onPress: function onPress() {\n      setModalVisible(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.textStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }, \"Redeem Code\")));\n}\n\nvar styles = StyleSheet.create({\n  label: {\n    color: \"black\",\n    margin: 10,\n    marginLeft: 0\n  },\n  header: {\n    color: \"#ff5400\",\n    fontSize: 30,\n    fontWeight: \"bold\",\n    fontStyle: \"italic\",\n    margin: 10,\n    marginLeft: 0\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: \"white\",\n    borderRadius: 20,\n    padding: 30,\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5\n  },\n  button: {\n    marginTop: 10,\n    marginLeft: 20,\n    marginRight: 20,\n    color: \"white\",\n    height: 40,\n    backgroundColor: \"#42A5F5\",\n    borderRadius: 20\n  },\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    paddingTop: Constants.statusBarHeight,\n    padding: 8,\n    backgroundColor: \"#004D73\"\n  },\n  input: {\n    backgroundColor: \"white\",\n    height: 40,\n    padding: 10,\n    borderRadius: 4,\n    borderWidth: 1,\n    borderColor: \"#c8c8c8\"\n  },\n  textStyle: {\n    padding: 8,\n    color: \"white\",\n    fontWeight: \"bold\",\n    textAlign: \"center\"\n  }\n});\nvar FETCH_USER_QUERY = gql(_templateObject());\nvar REDEEM_POINTS_MUTATION = gql(_templateObject2());\nexport default CodeButton;","map":{"version":3,"sources":["C:/Users/hp/Desktop/SHPE-UF-MOBILE/Pages/CodeButton.js"],"names":["React","useState","useContext","useMutation","useQuery","gql","useForm","Controller","Constants","CodeButton","FETCH_USER_QUERY","variables","userId","data","refetch","user","getUser","console","log","register","setValue","handleSubmit","control","reset","errors","onSubmit","setModalVisible","modalVisible","onChange","arg","value","nativeEvent","text","styles","container","Alert","alert","modalView","header","label","onBlur","input","required","firstName","button","textStyle","code","StyleSheet","create","color","margin","marginLeft","fontSize","fontWeight","fontStyle","backgroundColor","borderRadius","padding","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","marginTop","marginRight","flex","justifyContent","paddingTop","statusBarHeight","borderWidth","borderColor","textAlign","REDEEM_POINTS_MUTATION"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\r\nimport {\r\n  Text,\r\n  View,\r\n  StyleSheet,\r\n  TextInput,\r\n  Button,\r\n  Alert,\r\n  Modal,\r\n  TouchableHighlight,\r\n} from \"react-native\";\r\nimport { useMutation, useQuery, gql } from \"@apollo/client\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport Constants from \"expo-constants\";\r\n\r\n/*Isabel made a button. So, the idea should be that when her button is clicked\r\nit goes to my redeem code form*/\r\nfunction CodeButton() {\r\n  //const [errors, setErrors] = useState({});\r\n\r\n  let {data, refetch} = useQuery(FETCH_USER_QUERY, {\r\n    variables: {\r\n      userId: \"5f90e4d4920bab09f6df0106\",\r\n    }\r\n  });\r\n  if(data){\r\n    let user = data.getUser;\r\n    console.log(user);\r\n  }\r\n\r\n  const {\r\n    register,\r\n    setValue,\r\n    handleSubmit,\r\n    control,\r\n    reset,\r\n    errors,\r\n  } = useForm(/*redeemPointsCallback, {\r\n    code: \"\",\r\n    username: username\r\n  }*/);\r\n  // function redeemPointsCallback() {\r\n  //   redeemPoints();\r\n  // }\r\n  //\r\n  // const [redeemPoints, { loading }] = useMutation(REDEEM_POINTS_MUTATION, {\r\n  //   update(\r\n  //     _,\r\n  //     {\r\n  //       data: { redeemPoints: userData }\r\n  //     }\r\n  //   ) {\r\n  //     values.code = \"\";\r\n  //     setErrors(false);\r\n  //     setRedeemPointsModal(false);\r\n  //     updateGetUser(userData);\r\n  //   },\r\n  //\r\n  //   onError(err) {\r\n  //     setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n  //   },\r\n  //\r\n  //   variables: values\r\n  // });\r\n  //\r\n  // function updateGetUser(userData) {\r\n  //   user.fallPoints = userData.fallPoints;\r\n  //   user.springPoints = userData.springPoints;\r\n  //   user.summerPoints = userData.summerPoints;\r\n  //   user.events = userData.events;\r\n  //   user.tasks = userData.tasks;\r\n  //   user.message = userData.message;\r\n  //\r\n  //   if (user.message !== \"\") {\r\n  //     toast.warn(user.message, {\r\n  //       position: toast.POSITION.BOTTOM_CENTER\r\n  //     });\r\n  //   }\r\n  // }\r\n\r\n  const onSubmit = (data) => {\r\n    console.log(data);\r\n    setModalVisible(!modalVisible);\r\n    /*in here, we have the code. What we need is to use the use the Mutation\r\n    and put data as the code*/\r\n  };\r\n\r\n  const onChange = (arg) => {\r\n    return {\r\n      value: arg.nativeEvent.text,\r\n    };\r\n  };\r\n\r\n  console.log(errors);\r\n\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Modal\r\n        animationType=\"slide\"\r\n        transparent={true}\r\n        visible={modalVisible}\r\n        onRequestClose={() => {\r\n          // values.code = \"\";\r\n          // setErrors(false);\r\n          setModalVisible(!modalVisible);\r\n          Alert.alert(\"Modal has been closed.\");\r\n        }}\r\n      >\r\n        <View style={styles.modalView}>\r\n          <Text style={styles.header}>Redeem Points</Text>\r\n          <Text style={styles.label}>Enter code:</Text>\r\n          <Controller\r\n            control={control}\r\n            render={({ onChange, onBlur, value }) => (\r\n              <TextInput\r\n                style={styles.input}\r\n                onBlur={onBlur}\r\n                onChangeText={(value) => onChange(value)}\r\n                value={value}\r\n              />\r\n            )}\r\n            name=\"code\"\r\n            rules={{ required: true }}\r\n            defaultValue = \"\"\r\n          />\r\n          {errors.firstName && <Text>No code was provided.</Text>}\r\n\r\n          <TouchableHighlight\r\n            style={styles.button}\r\n            onPress={handleSubmit(onSubmit)}\r\n          >\r\n            <Text style={styles.textStyle}>Submit</Text>\r\n          </TouchableHighlight>\r\n\r\n          <TouchableHighlight\r\n            style={styles.button}\r\n            onPress={() => {\r\n              setModalVisible(!modalVisible);\r\n              reset({\r\n                code: \"\",\r\n              });\r\n            }}\r\n          >\r\n            <Text style={styles.textStyle}>Cancel</Text>\r\n          </TouchableHighlight>\r\n        </View>\r\n      </Modal>\r\n\r\n      <TouchableHighlight\r\n        style={styles.button}\r\n        onPress={() => {\r\n          setModalVisible(true);\r\n        }}\r\n      >\r\n        <Text style={styles.textStyle}>Redeem Code</Text>\r\n      </TouchableHighlight>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  label: {\r\n    color: \"black\",\r\n    margin: 10,\r\n    marginLeft: 0,\r\n  },\r\n  header: {\r\n    color: \"#ff5400\",\r\n    fontSize: 30,\r\n    fontWeight: \"bold\",\r\n    fontStyle: \"italic\",\r\n    margin: 10,\r\n    marginLeft: 0,\r\n  },\r\n  modalView: {\r\n    margin: 20,\r\n    backgroundColor: \"white\",\r\n    borderRadius: 20,\r\n    padding: 30,\r\n    //alignItems: \"center\",\r\n    shadowColor: \"#000\",\r\n    shadowOffset: {\r\n      width: 0,\r\n      height: 2,\r\n    },\r\n    shadowOpacity: 0.25,\r\n    shadowRadius: 3.84,\r\n    elevation: 5,\r\n  },\r\n  button: {\r\n    marginTop: 10,\r\n    marginLeft: 20,\r\n    marginRight: 20,\r\n    color: \"white\",\r\n    height: 40,\r\n    backgroundColor: \"#42A5F5\",\r\n    borderRadius: 20,\r\n  },\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    paddingTop: Constants.statusBarHeight,\r\n    padding: 8,\r\n    backgroundColor: \"#004D73\",\r\n  },\r\n  input: {\r\n    backgroundColor: \"white\",\r\n    height: 40,\r\n    padding: 10,\r\n    borderRadius: 4,\r\n    borderWidth: 1,\r\n    borderColor: \"#c8c8c8\"\r\n  },\r\n  textStyle: {\r\n    padding: 8,\r\n    color: \"white\",\r\n    fontWeight: \"bold\",\r\n    textAlign: \"center\",\r\n  },\r\n});\r\n\r\nconst FETCH_USER_QUERY = gql`\r\n  query getUser($userId: ID!) {\r\n    getUser(userId: $userId) {\r\n      firstName\r\n      lastName\r\n      points\r\n      fallPoints\r\n      springPoints\r\n      summerPoints\r\n      fallPercentile\r\n      springPercentile\r\n      summerPercentile\r\n      events {\r\n        name\r\n        category\r\n        createdAt\r\n        points\r\n      }\r\n      tasks {\r\n        name\r\n        points\r\n        startDate\r\n      }\r\n      bookmarkedTasks\r\n    }\r\n  }\r\n`;\r\n\r\nconst REDEEM_POINTS_MUTATION = gql`\r\n  mutation redeemPoints($code: String!, $username: String!) {\r\n    redeemPoints(redeemPointsInput: { code: $code, username: $username }) {\r\n      points\r\n      fallPoints\r\n      springPoints\r\n      summerPoints\r\n      message\r\n      events {\r\n        id\r\n        name\r\n        category\r\n        createdAt\r\n        points\r\n      }\r\n      tasks {\r\n        name\r\n        points\r\n        createdAt\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default CodeButton;\r\n"]},"metadata":{},"sourceType":"module"}