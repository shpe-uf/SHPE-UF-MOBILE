{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\isami\\\\Desktop\\\\CompSciStuff\\\\github\\\\shpe\\\\SHPE-UF-MOBILE\\\\node_modules\\\\react-native-table-component\\\\components\\\\cell.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport { ViewPropTypes } from \"react-native-web/dist/index\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nexport var Cell = function (_Component) {\n  _inherits(Cell, _Component);\n\n  var _super = _createSuper(Cell);\n\n  function Cell() {\n    _classCallCheck(this, Cell);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Cell, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          data = _this$props.data,\n          width = _this$props.width,\n          height = _this$props.height,\n          flex = _this$props.flex,\n          style = _this$props.style,\n          textStyle = _this$props.textStyle,\n          borderStyle = _this$props.borderStyle,\n          props = _objectWithoutProperties(_this$props, [\"data\", \"width\", \"height\", \"flex\", \"style\", \"textStyle\", \"borderStyle\"]);\n\n      var textDom = React.isValidElement(data) ? data : React.createElement(Text, _extends({\n        style: [textStyle, styles.text]\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 7\n        }\n      }), data);\n      var borderTopWidth = borderStyle && borderStyle.borderWidth || 0;\n      var borderRightWidth = borderTopWidth;\n      var borderColor = borderStyle && borderStyle.borderColor || '#000';\n      return React.createElement(View, {\n        style: [{\n          borderTopWidth: borderTopWidth,\n          borderRightWidth: borderRightWidth,\n          borderColor: borderColor\n        }, styles.cell, width && {\n          width: width\n        }, height && {\n          height: height\n        }, flex && {\n          flex: flex\n        }, !width && !flex && !height && !style && {\n          flex: 1\n        }, style],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 7\n        }\n      }, textDom);\n    }\n  }]);\n\n  return Cell;\n}(Component);\nCell.propTypes = {\n  style: ViewPropTypes.style,\n  textStyle: Text.propTypes.style,\n  borderStyle: ViewPropTypes.style\n};\nvar styles = StyleSheet.create({\n  cell: {\n    justifyContent: 'center'\n  },\n  text: {\n    backgroundColor: 'transparent'\n  }\n});","map":{"version":3,"sources":["C:/Users/isami/Desktop/CompSciStuff/github/shpe/SHPE-UF-MOBILE/node_modules/react-native-table-component/components/cell.js"],"names":["React","Component","ViewPropTypes","Cell","props","data","width","height","flex","style","textStyle","borderStyle","textDom","isValidElement","styles","text","borderTopWidth","borderWidth","borderRightWidth","borderColor","cell","propTypes","Text","StyleSheet","create","justifyContent","backgroundColor"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;SACeC,a;;;AAEf,WAAaC,IAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,6BAOW;AAAA,wBACwE,KAAKC,KAD7E;AAAA,UACCC,IADD,eACCA,IADD;AAAA,UACOC,KADP,eACOA,KADP;AAAA,UACcC,MADd,eACcA,MADd;AAAA,UACsBC,IADtB,eACsBA,IADtB;AAAA,UAC4BC,KAD5B,eAC4BA,KAD5B;AAAA,UACmCC,SADnC,eACmCA,SADnC;AAAA,UAC8CC,WAD9C,eAC8CA,WAD9C;AAAA,UAC8DP,KAD9D;;AAEP,UAAMQ,OAAO,GAAGZ,KAAK,CAACa,cAAN,CAAqBR,IAArB,IACdA,IADc,GAGd,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAACK,SAAD,EAAYI,MAAM,CAACC,IAAnB;AAAb,SAA2CX,KAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACGC,IADH,CAHF;AAOA,UAAMW,cAAc,GAAIL,WAAW,IAAIA,WAAW,CAACM,WAA5B,IAA4C,CAAnE;AACA,UAAMC,gBAAgB,GAAGF,cAAzB;AACA,UAAMG,WAAW,GAAIR,WAAW,IAAIA,WAAW,CAACQ,WAA5B,IAA4C,MAAhE;AAEA,aACE,oBAAC,IAAD;AACE,QAAA,KAAK,EAAE,CACL;AACEH,UAAAA,cAAc,EAAdA,cADF;AAEEE,UAAAA,gBAAgB,EAAhBA,gBAFF;AAGEC,UAAAA,WAAW,EAAXA;AAHF,SADK,EAMLL,MAAM,CAACM,IANF,EAOLd,KAAK,IAAI;AAAEA,UAAAA,KAAK,EAALA;AAAF,SAPJ,EAQLC,MAAM,IAAI;AAAEA,UAAAA,MAAM,EAANA;AAAF,SARL,EASLC,IAAI,IAAI;AAAEA,UAAAA,IAAI,EAAJA;AAAF,SATH,EAUL,CAACF,KAAD,IAAU,CAACE,IAAX,IAAmB,CAACD,MAApB,IAA8B,CAACE,KAA/B,IAAwC;AAAED,UAAAA,IAAI,EAAE;AAAR,SAVnC,EAWLC,KAXK,CADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAeGG,OAfH,CADF;AAmBD;AAvCH;;AAAA;AAAA,EAA0BX,SAA1B;AAAaE,I,CACJkB,S,GAAY;AACjBZ,EAAAA,KAAK,EAAEP,aAAa,CAACO,KADJ;AAEjBC,EAAAA,SAAS,EAAEY,IAAI,CAACD,SAAL,CAAeZ,KAFT;AAGjBE,EAAAA,WAAW,EAAET,aAAa,CAACO;AAHV,C;AAyCrB,IAAMK,MAAM,GAAGS,UAAU,CAACC,MAAX,CAAkB;AAC/BJ,EAAAA,IAAI,EAAE;AAAEK,IAAAA,cAAc,EAAE;AAAlB,GADyB;AAE/BV,EAAAA,IAAI,EAAE;AAAEW,IAAAA,eAAe,EAAE;AAAnB;AAFyB,CAAlB,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { View, ViewPropTypes, Text, StyleSheet } from 'react-native';\n\nexport class Cell extends Component {\n  static propTypes = {\n    style: ViewPropTypes.style,\n    textStyle: Text.propTypes.style,\n    borderStyle: ViewPropTypes.style\n  };\n\n  render() {\n    const { data, width, height, flex, style, textStyle, borderStyle, ...props } = this.props;\n    const textDom = React.isValidElement(data) ? (\n      data\n    ) : (\n      <Text style={[textStyle, styles.text]} {...props}>\n        {data}\n      </Text>\n    );\n    const borderTopWidth = (borderStyle && borderStyle.borderWidth) || 0;\n    const borderRightWidth = borderTopWidth;\n    const borderColor = (borderStyle && borderStyle.borderColor) || '#000';\n\n    return (\n      <View\n        style={[\n          {\n            borderTopWidth,\n            borderRightWidth,\n            borderColor\n          },\n          styles.cell,\n          width && { width },\n          height && { height },\n          flex && { flex },\n          !width && !flex && !height && !style && { flex: 1 },\n          style\n        ]}\n      >\n        {textDom}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  cell: { justifyContent: 'center' },\n  text: { backgroundColor: 'transparent' }\n});\n"]},"metadata":{},"sourceType":"module"}