{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactNative from \"react-native-web/dist/index\";\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nvar ScrollViewManager = NativeModules.ScrollViewManager;\n\nvar KeyboardAwareBase = function (_Component) {\n  _inherits(KeyboardAwareBase, _Component);\n\n  var _super = _createSuper(KeyboardAwareBase);\n\n  function KeyboardAwareBase(props) {\n    var _this;\n\n    _classCallCheck(this, KeyboardAwareBase);\n\n    _this = _super.call(this, props);\n\n    _this._bind('_onKeyboardWillShow', '_onKeyboardWillHide', '_addKeyboardEventListeners', '_removeKeyboardListeners', '_scrollToFocusedTextInput', '_onKeyboardAwareViewLayout', 'scrollToBottom', 'scrollBottomOnNextSizeChange');\n\n    _this.state = {\n      keyboardHeight: 0\n    };\n\n    _this._addKeyboardEventListeners();\n\n    return _this;\n  }\n\n  _createClass(KeyboardAwareBase, [{\n    key: \"_bind\",\n    value: function _bind() {\n      var _this2 = this;\n\n      for (var _len = arguments.length, methods = new Array(_len), _key = 0; _key < _len; _key++) {\n        methods[_key] = arguments[_key];\n      }\n\n      methods.forEach(function (method) {\n        _this2[method] = _this2[method].bind(_this2);\n      });\n    }\n  }, {\n    key: \"_addKeyboardEventListeners\",\n    value: function _addKeyboardEventListeners() {\n      var KeyboardEventsObj = Keyboard || DeviceEventEmitter;\n      this.keyboardEventListeners = [KeyboardEventsObj.addListener('keyboardWillShow', this._onKeyboardWillShow), KeyboardEventsObj.addListener('keyboardWillHide', this._onKeyboardWillHide)];\n    }\n  }, {\n    key: \"_removeKeyboardListeners\",\n    value: function _removeKeyboardListeners() {\n      this.keyboardEventListeners.forEach(function (eventListener) {\n        return eventListener.remove();\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n\n      if (this._keyboardAwareView && this.props.startScrolledToBottom) {\n        this.scrollToBottom(false);\n        setTimeout(function () {\n          return _this3._keyboardAwareView.setNativeProps({\n            opacity: 1\n          });\n        }, 100);\n      }\n    }\n  }, {\n    key: \"_onKeyboardAwareViewLayout\",\n    value: function _onKeyboardAwareViewLayout(layout) {\n      this._keyboardAwareView.layout = layout;\n      this._keyboardAwareView.contentOffset = {\n        x: 0,\n        y: 0\n      };\n\n      this._updateKeyboardAwareViewContentSize();\n    }\n  }, {\n    key: \"_onKeyboardAwareViewScroll\",\n    value: function _onKeyboardAwareViewScroll(contentOffset) {\n      this._keyboardAwareView.contentOffset = contentOffset;\n\n      this._updateKeyboardAwareViewContentSize();\n    }\n  }, {\n    key: \"_updateKeyboardAwareViewContentSize\",\n    value: function _updateKeyboardAwareViewContentSize() {\n      var _this4 = this;\n\n      if (ScrollViewManager && ScrollViewManager.getContentSize) {\n        ScrollViewManager.getContentSize(ReactNative.findNodeHandle(this._keyboardAwareView), function (res) {\n          if (_this4._keyboardAwareView) {\n            _this4._keyboardAwareView.contentSize = res;\n\n            if (_this4.state.scrollBottomOnNextSizeChange) {\n              _this4.scrollToBottom();\n\n              _this4.state.scrollBottomOnNextSizeChange = false;\n            }\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._removeKeyboardListeners();\n    }\n  }, {\n    key: \"_scrollToFocusedTextInput\",\n    value: function _scrollToFocusedTextInput() {\n      var _this5 = this;\n\n      if (this.props.getTextInputRefs) {\n        var textInputRefs = this.props.getTextInputRefs();\n        textInputRefs.some(function (textInputRef, index, array) {\n          var isFocusedFunc = textInputRef.isFocused();\n          var isFocused = isFocusedFunc && typeof isFocusedFunc === \"function\" ? isFocusedFunc() : isFocusedFunc;\n\n          if (isFocused) {\n            setTimeout(function () {\n              _this5._keyboardAwareView.getScrollResponder().scrollResponderScrollNativeHandleToKeyboard(ReactNative.findNodeHandle(textInputRef), _this5.props.scrollToInputAdditionalOffset, true);\n            }, 0);\n          }\n\n          return isFocused;\n        });\n      }\n    }\n  }, {\n    key: \"_onKeyboardWillShow\",\n    value: function _onKeyboardWillShow(event) {\n      this._scrollToFocusedTextInput();\n\n      var newKeyboardHeight = event.endCoordinates.height;\n\n      if (this.state.keyboardHeight === newKeyboardHeight) {\n        return;\n      }\n\n      this.setState({\n        keyboardHeight: newKeyboardHeight\n      });\n\n      if (this.props.scrollToBottomOnKBShow) {\n        this.scrollToBottom();\n      }\n    }\n  }, {\n    key: \"_onKeyboardWillHide\",\n    value: function _onKeyboardWillHide(event) {\n      var keyboardHeight = this.state.keyboardHeight;\n      this.setState({\n        keyboardHeight: 0\n      });\n      var hasYOffset = this._keyboardAwareView && this._keyboardAwareView.contentOffset && this._keyboardAwareView.contentOffset.y !== undefined;\n      var yOffset = hasYOffset ? Math.max(this._keyboardAwareView.contentOffset.y - keyboardHeight, 0) : 0;\n\n      this._keyboardAwareView.scrollTo({\n        x: 0,\n        y: yOffset,\n        animated: true\n      });\n    }\n  }, {\n    key: \"scrollBottomOnNextSizeChange\",\n    value: function scrollBottomOnNextSizeChange() {\n      this.state.scrollBottomOnNextSizeChange = true;\n    }\n  }, {\n    key: \"scrollToBottom\",\n    value: function scrollToBottom() {\n      var _this6 = this;\n\n      var scrollAnimated = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (this._keyboardAwareView) {\n        if (!this._keyboardAwareView.contentSize) {\n          setTimeout(function () {\n            return _this6.scrollToBottom(scrollAnimated);\n          }, 50);\n          return;\n        }\n\n        var bottomYOffset = this._keyboardAwareView.contentSize.height - this._keyboardAwareView.layout.height + this._keyboardAwareView.props.contentInset.bottom;\n\n        this._keyboardAwareView.scrollTo({\n          x: 0,\n          y: bottomYOffset,\n          animated: scrollAnimated\n        });\n      }\n    }\n  }, {\n    key: \"scrollTo\",\n    value: function scrollTo(options) {\n      if (this._keyboardAwareView) this._keyboardAwareView.scrollTo(options);\n    }\n  }]);\n\n  return KeyboardAwareBase;\n}(Component);\n\nexport { KeyboardAwareBase as default };\nKeyboardAwareBase.propTypes = {\n  startScrolledToBottom: PropTypes.bool,\n  scrollToBottomOnKBShow: PropTypes.bool,\n  scrollToInputAdditionalOffset: PropTypes.number\n};\nKeyboardAwareBase.defaultProps = {\n  startScrolledToBottom: false,\n  scrollToBottomOnKBShow: false,\n  scrollToInputAdditionalOffset: 75\n};","map":{"version":3,"sources":["/Users/julia/SHPE-UF-MOBILE/node_modules/react-native-keyboard-aware-scrollview/src/KeyboardAwareBase.js"],"names":["React","Component","PropTypes","ReactNative","ScrollViewManager","NativeModules","KeyboardAwareBase","props","_bind","state","keyboardHeight","_addKeyboardEventListeners","methods","forEach","method","bind","KeyboardEventsObj","Keyboard","DeviceEventEmitter","keyboardEventListeners","addListener","_onKeyboardWillShow","_onKeyboardWillHide","eventListener","remove","_keyboardAwareView","startScrolledToBottom","scrollToBottom","setTimeout","setNativeProps","opacity","layout","contentOffset","x","y","_updateKeyboardAwareViewContentSize","getContentSize","findNodeHandle","res","contentSize","scrollBottomOnNextSizeChange","_removeKeyboardListeners","getTextInputRefs","textInputRefs","some","textInputRef","index","array","isFocusedFunc","isFocused","getScrollResponder","scrollResponderScrollNativeHandleToKeyboard","scrollToInputAdditionalOffset","event","_scrollToFocusedTextInput","newKeyboardHeight","endCoordinates","height","setState","scrollToBottomOnKBShow","hasYOffset","undefined","yOffset","Math","max","scrollTo","animated","scrollAnimated","bottomYOffset","contentInset","bottom","options","propTypes","bool","number","defaultProps"],"mappings":"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","sourcesContent":["\nimport React , { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n\nimport ReactNative, {\n  DeviceEventEmitter,\n  Keyboard,\n  NativeModules,\n} from 'react-native';\n\nconst ScrollViewManager = NativeModules.ScrollViewManager;\n\nexport default class KeyboardAwareBase extends Component {\n  constructor(props) {\n    super(props);\n    this._bind('_onKeyboardWillShow', '_onKeyboardWillHide', '_addKeyboardEventListeners', '_removeKeyboardListeners', '_scrollToFocusedTextInput', '_onKeyboardAwareViewLayout', 'scrollToBottom', 'scrollBottomOnNextSizeChange');\n    this.state = {keyboardHeight: 0};\n    this._addKeyboardEventListeners();\n  }\n  \n  _bind(...methods) {\n    methods.forEach((method) => {\n      this[method] = this[method].bind(this);\n    });\n  }\n  \n  _addKeyboardEventListeners() {\n    const KeyboardEventsObj = Keyboard || DeviceEventEmitter;\n    this.keyboardEventListeners = [\n      KeyboardEventsObj.addListener('keyboardWillShow', this._onKeyboardWillShow),\n      KeyboardEventsObj.addListener('keyboardWillHide', this._onKeyboardWillHide)\n    ];\n  }\n  \n  _removeKeyboardListeners() {\n    this.keyboardEventListeners.forEach((eventListener) => eventListener.remove());\n  }\n\n  componentDidMount() {\n    if(this._keyboardAwareView && this.props.startScrolledToBottom) {\n      this.scrollToBottom(false);\n      setTimeout(() => this._keyboardAwareView.setNativeProps({ opacity: 1 }), 100);\n    }\n  }\n\n  _onKeyboardAwareViewLayout(layout) {\n    this._keyboardAwareView.layout = layout;\n    this._keyboardAwareView.contentOffset = {x: 0, y: 0};\n    this._updateKeyboardAwareViewContentSize();\n  }\n\n  _onKeyboardAwareViewScroll(contentOffset) {\n    this._keyboardAwareView.contentOffset = contentOffset;\n    this._updateKeyboardAwareViewContentSize();\n  }\n\n  _updateKeyboardAwareViewContentSize() {\n    if(ScrollViewManager && ScrollViewManager.getContentSize) {\n      ScrollViewManager.getContentSize(ReactNative.findNodeHandle(this._keyboardAwareView), (res)=> {\n        if(this._keyboardAwareView) {\n          this._keyboardAwareView.contentSize = res;\n          if(this.state.scrollBottomOnNextSizeChange) {\n            this.scrollToBottom();\n            this.state.scrollBottomOnNextSizeChange = false;\n          }\n        }\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    this._removeKeyboardListeners();\n  }\n  \n  _scrollToFocusedTextInput() {\n    if (this.props.getTextInputRefs) {\n      const textInputRefs = this.props.getTextInputRefs();\n      textInputRefs.some((textInputRef, index, array) => {\n        const isFocusedFunc = textInputRef.isFocused();\n        const isFocused = isFocusedFunc && (typeof isFocusedFunc === \"function\") ? isFocusedFunc() : isFocusedFunc;\n        if (isFocused) {\n          setTimeout(() => {\n            this._keyboardAwareView.getScrollResponder().scrollResponderScrollNativeHandleToKeyboard(\n              ReactNative.findNodeHandle(textInputRef), this.props.scrollToInputAdditionalOffset, true);\n          }, 0);\n        }\n        return isFocused;\n      });\n    }\n  }\n  \n  _onKeyboardWillShow(event) {\n    this._scrollToFocusedTextInput();\n    \n    const newKeyboardHeight = event.endCoordinates.height;\n    if (this.state.keyboardHeight === newKeyboardHeight) {\n      return;\n    }\n    \n    this.setState({keyboardHeight: newKeyboardHeight});\n\n    if(this.props.scrollToBottomOnKBShow) {\n      this.scrollToBottom();\n    }\n  }\n\n  _onKeyboardWillHide(event) {\n    const keyboardHeight = this.state.keyboardHeight;\n    this.setState({keyboardHeight: 0});\n\n    const hasYOffset = this._keyboardAwareView && this._keyboardAwareView.contentOffset && this._keyboardAwareView.contentOffset.y !== undefined;\n    const yOffset = hasYOffset ? Math.max(this._keyboardAwareView.contentOffset.y - keyboardHeight, 0) : 0;\n    this._keyboardAwareView.scrollTo({x: 0, y: yOffset, animated: true});\n  }\n\n  scrollBottomOnNextSizeChange() {\n    this.state.scrollBottomOnNextSizeChange = true;\n  }\n\n  scrollToBottom(scrollAnimated = true) {\n    if (this._keyboardAwareView) {\n\n      if(!this._keyboardAwareView.contentSize) {\n        setTimeout(() => this.scrollToBottom(scrollAnimated), 50);\n        return;\n      }\n\n      const bottomYOffset = this._keyboardAwareView.contentSize.height - this._keyboardAwareView.layout.height + this._keyboardAwareView.props.contentInset.bottom;\n      this._keyboardAwareView.scrollTo({x: 0, y: bottomYOffset, animated: scrollAnimated});\n    }\n  }\n  scrollTo(options) {\n    if (this._keyboardAwareView) this._keyboardAwareView.scrollTo(options);\n  }\n}\n\nKeyboardAwareBase.propTypes = {\n  startScrolledToBottom: PropTypes.bool,\n  scrollToBottomOnKBShow: PropTypes.bool,\n  scrollToInputAdditionalOffset: PropTypes.number\n};\nKeyboardAwareBase.defaultProps = {\n  startScrolledToBottom: false,\n  scrollToBottomOnKBShow: false,\n  scrollToInputAdditionalOffset: 75\n};\n"]},"metadata":{},"sourceType":"module"}