{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\SHPE-UF-MOBILE\\\\Pages\\\\ResetPassword.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  mutation forgotPassword($email: String!) {\\n    forgotPassword(email: $email) {\\n      id\\n      email\\n      username\\n      createdAt\\n      token\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scrollview';\nimport { useMutation, gql } from \"@apollo/client\";\nimport { useForm, getErrors } from \"../util/hooks\";\n\nfunction Login(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useForm = useForm(resetPassword, {\n    email: \"\"\n  }),\n      values = _useForm.values;\n\n  var _useMutation = useMutation(FORGOT_PASSWORD, {\n    onError: function onError(err) {\n      getErrors(err);\n    },\n    onCompleted: function onCompleted() {\n      Alert.alert(\"Check your email!\");\n      navigation.navigate('Login');\n    },\n    variables: values\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      resetPassword = _useMutation2[0];\n\n  return React.createElement(SafeAreaView, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, React.createElement(TouchableWithoutFeedback, {\n    onPress: Keyboard.dismiss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }, React.createElement(KeyboardAwareScrollView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 17\n    }\n  }, React.createElement(TextInput, {\n    style: styles.input,\n    placeholder: \"Email\",\n    onChangeText: function onChangeText(text) {\n      return values.email = text;\n    },\n    spellCheck: false,\n    autoCorrect: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 21\n    }\n  }), React.createElement(Button, {\n    title: \"Reset Password\",\n    onPress: function onPress() {\n      return resetPassword();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 25\n    }\n  }))));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#42A5F5',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  input: {\n    borderWidth: 1,\n    backgroundColor: 'white',\n    color: \"black\",\n    borderRadius: 14,\n    padding: 8,\n    margin: 10,\n    width: 350,\n    height: 55,\n    fontSize: 18\n  },\n  wording: {\n    fontSize: 20,\n    color: 'black'\n  }\n});\nvar FORGOT_PASSWORD = gql(_templateObject());\nexport default Login;","map":{"version":3,"sources":["C:/Users/hp/Desktop/SHPE-UF-MOBILE/Pages/ResetPassword.js"],"names":["React","KeyboardAwareScrollView","useMutation","gql","useForm","getErrors","Login","navigation","resetPassword","email","values","FORGOT_PASSWORD","onError","err","onCompleted","Alert","alert","navigate","variables","styles","container","Keyboard","dismiss","input","text","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","borderWidth","color","borderRadius","padding","margin","width","height","fontSize","wording"],"mappings":";;;;;;;;;;;;;;AAAA,OAAQA,KAAR,MAAmB,OAAnB;;;;;;;;AAEA,SAASC,uBAAT,QAAwC,wCAAxC;AACA,SAASC,WAAT,EAAsBC,GAAtB,QAAiC,gBAAjC;AACA,SAASC,OAAT,EAAkBC,SAAlB;;AAEA,SAASC,KAAT,OAA6B;AAAA,MAAbC,UAAa,QAAbA,UAAa;;AAAA,iBACNH,OAAO,CAACI,aAAD,EAAgB;AACtCC,IAAAA,KAAK,EAAE;AAD+B,GAAhB,CADD;AAAA,MACjBC,MADiB,YACjBA,MADiB;;AAAA,qBAKDR,WAAW,CAACS,eAAD,EAAkB;AACnDC,IAAAA,OADmD,mBAC3CC,GAD2C,EACtC;AACXR,MAAAA,SAAS,CAACQ,GAAD,CAAT;AACD,KAHkD;AAKnDC,IAAAA,WALmD,yBAKrC;AACZC,MAAAA,KAAK,CAACC,KAAN,CAAY,mBAAZ;AACAT,MAAAA,UAAU,CAACU,QAAX,CAAoB,OAApB;AACD,KARkD;AAUnDC,IAAAA,SAAS,EAAER;AAVwC,GAAlB,CALV;AAAA;AAAA,MAKlBF,aALkB;;AAkBzB,SACI,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAGW,MAAM,CAACC,SAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,wBAAD;AAA0B,IAAA,OAAO,EAAEC,QAAQ,CAACC,OAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,uBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,SAAD;AACI,IAAA,KAAK,EAAEH,MAAM,CAACI,KADlB;AAEI,IAAA,WAAW,EAAC,OAFhB;AAGI,IAAA,YAAY,EAAE,sBAAAC,IAAI;AAAA,aACdd,MAAM,CAACD,KAAP,GAAee,IADD;AAAA,KAHtB;AAMI,IAAA,UAAU,EAAE,KANhB;AAOI,IAAA,WAAW,EAAE,KAPjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAUQ,oBAAC,MAAD;AACA,IAAA,KAAK,EAAE,gBADP;AAEA,IAAA,OAAO,EAAE;AAAA,aAAMhB,aAAa,EAAnB;AAAA,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVR,CADJ,CADJ,CADJ;AAqBH;;AAED,IAAMW,MAAM,GAAGM,UAAU,CAACC,MAAX,CAAkB;AAC7BN,EAAAA,SAAS,EAAE;AACPO,IAAAA,IAAI,EAAE,CADC;AAEPC,IAAAA,eAAe,EAAE,SAFV;AAGPC,IAAAA,UAAU,EAAE,QAHL;AAIPC,IAAAA,cAAc,EAAE;AAJT,GADkB;AAO7BP,EAAAA,KAAK,EAAE;AACHQ,IAAAA,WAAW,EAAE,CADV;AAEHH,IAAAA,eAAe,EAAE,OAFd;AAGHI,IAAAA,KAAK,EAAE,OAHJ;AAIHC,IAAAA,YAAY,EAAE,EAJX;AAKHC,IAAAA,OAAO,EAAE,CALN;AAMHC,IAAAA,MAAM,EAAE,EANL;AAOHC,IAAAA,KAAK,EAAE,GAPJ;AAQHC,IAAAA,MAAM,EAAE,EARL;AASHC,IAAAA,QAAQ,EAAE;AATP,GAPsB;AAkB7BC,EAAAA,OAAO,EAAE;AACLD,IAAAA,QAAQ,EAAE,EADL;AAELN,IAAAA,KAAK,EAAE;AAFF;AAlBoB,CAAlB,CAAf;AAwBA,IAAMrB,eAAe,GAAGR,GAAH,mBAArB;AAYA,eAAeG,KAAf","sourcesContent":["import  React from 'react';\r\nimport { TouchableWithoutFeedback, TextInput, StyleSheet, SafeAreaView, Keyboard, Button, Alert } from 'react-native';\r\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scrollview';\r\nimport { useMutation, gql } from \"@apollo/client\";\r\nimport { useForm, getErrors } from \"../util/hooks\";\r\n\r\nfunction Login({navigation}) {\r\n    const { values } = useForm(resetPassword, {\r\n        email: \"\"\r\n    });\r\n\r\n    const [resetPassword] = useMutation(FORGOT_PASSWORD, {\r\n      onError(err) {\r\n        getErrors(err);\r\n      },\r\n\r\n      onCompleted() {\r\n        Alert.alert(\"Check your email!\");\r\n        navigation.navigate('Login');\r\n      },\r\n\r\n      variables: values\r\n    });\r\n\r\n    return (\r\n        <SafeAreaView style ={styles.container}>\r\n            <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\r\n                <KeyboardAwareScrollView>\r\n                    <TextInput\r\n                        style={styles.input}\r\n                        placeholder='Email'\r\n                        onChangeText={text =>\r\n                            values.email = text\r\n                        }\r\n                        spellCheck={false}\r\n                        autoCorrect={false}\r\n                        />\r\n                        <Button\r\n                        title =\"Reset Password\"\r\n                        onPress={() => resetPassword()}\r\n                    />\r\n                </KeyboardAwareScrollView>\r\n            </TouchableWithoutFeedback>\r\n        </SafeAreaView>   \r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1, \r\n        backgroundColor: '#42A5F5',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    input: {\r\n        borderWidth: 1,\r\n        backgroundColor: 'white',\r\n        color: \"black\",\r\n        borderRadius: 14,\r\n        padding: 8,\r\n        margin: 10,\r\n        width: 350,\r\n        height: 55, \r\n        fontSize: 18,\r\n    },\r\n    wording: {\r\n        fontSize: 20,\r\n        color: 'black',\r\n    },\r\n});\r\n\r\nconst FORGOT_PASSWORD = gql`\r\n  mutation forgotPassword($email: String!) {\r\n    forgotPassword(email: $email) {\r\n      id\r\n      email\r\n      username\r\n      createdAt\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Login;"]},"metadata":{},"sourceType":"module"}