{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\nvar _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\SHPE-UF-MOBILE\\\\Pages\\\\TaskButton.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  query getUser($userId: ID!) {\\n    getUser(userId: $userId) {\\n      firstName\\n      lastName\\n      points\\n      fallPoints\\n      springPoints\\n      summerPoints\\n      fallPercentile\\n      springPercentile\\n      summerPercentile\\n      events {\\n        name\\n        category\\n        createdAt\\n        points\\n      }\\n      tasks {\\n        name\\n        points\\n        startDate\\n      }\\n      bookmarkedTasks\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useContext } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport { useMutation, useQuery, gql } from \"@apollo/client\";\nimport { useForm, getErrors } from \"../util/hooks\";\nimport Constants from \"expo-constants\";\n\nfunction TaskButton() {\n  var _useQuery = useQuery(FETCH_USER_QUERY, {\n    variables: {\n      userId: \"5fb2faa33945aa36700adfd0\"\n    }\n  }),\n      data = _useQuery.data,\n      refetch = _useQuery.refetch;\n\n  if (data) {\n    var _user = data.getUser;\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, React.createElement(TouchableHighlight, {\n    style: styles.button,\n    onPress: console.log(user),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.textStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, \"Testing\")));\n}\n\nvar styles = StyleSheet.create({\n  label: {\n    color: \"black\",\n    margin: 10,\n    marginLeft: 0\n  },\n  header: {\n    color: \"#ff5400\",\n    fontSize: 30,\n    fontWeight: \"bold\",\n    fontStyle: \"italic\",\n    margin: 10,\n    marginLeft: 0\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: \"white\",\n    borderRadius: 20,\n    padding: 30,\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5\n  },\n  button: {\n    marginTop: 10,\n    marginLeft: 20,\n    marginRight: 20,\n    color: \"white\",\n    height: 40,\n    backgroundColor: \"#42A5F5\",\n    borderRadius: 20\n  },\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    paddingTop: Constants.statusBarHeight,\n    padding: 8,\n    backgroundColor: \"#004D73\"\n  },\n  input: {\n    backgroundColor: \"white\",\n    height: 40,\n    padding: 10,\n    borderRadius: 4,\n    borderWidth: 1,\n    borderColor: \"#c8c8c8\"\n  },\n  textStyle: {\n    padding: 8,\n    color: \"white\",\n    fontWeight: \"bold\",\n    textAlign: \"center\"\n  }\n});\nvar FETCH_USER_QUERY = gql(_templateObject());\nexport default TaskButton;","map":{"version":3,"sources":["C:/Users/hp/Desktop/SHPE-UF-MOBILE/Pages/TaskButton.js"],"names":["React","useState","useContext","useMutation","useQuery","gql","useForm","getErrors","Constants","TaskButton","FETCH_USER_QUERY","variables","userId","data","refetch","user","getUser","styles","container","button","console","log","textStyle","StyleSheet","create","label","color","margin","marginLeft","header","fontSize","fontWeight","fontStyle","modalView","backgroundColor","borderRadius","padding","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","marginTop","marginRight","flex","justifyContent","paddingTop","statusBarHeight","input","borderWidth","borderColor","textAlign"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\r\nimport {\r\n  Text,\r\n  View,\r\n  StyleSheet,\r\n  TextInput,\r\n  Button,\r\n  Alert,\r\n  Modal,\r\n  TouchableHighlight,\r\n} from \"react-native\";\r\nimport { useMutation, useQuery, gql } from \"@apollo/client\";\r\nimport { useForm, getErrors } from \"../util/hooks\";\r\nimport Constants from \"expo-constants\";\r\n\r\nfunction TaskButton() {\r\n  let { data, refetch } = useQuery(FETCH_USER_QUERY, {\r\n    variables: {\r\n      userId: \"5fb2faa33945aa36700adfd0\", //to be changed to id later\r\n    },\r\n  });\r\n  if (data) {\r\n    let user = data.getUser;\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <TouchableHighlight\r\n        style={styles.button}\r\n        onPress={console.log(user)}\r\n      >\r\n        <Text style={styles.textStyle}>Testing</Text>\r\n      </TouchableHighlight>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  label: {\r\n    color: \"black\",\r\n    margin: 10,\r\n    marginLeft: 0,\r\n  },\r\n  header: {\r\n    color: \"#ff5400\",\r\n    fontSize: 30,\r\n    fontWeight: \"bold\",\r\n    fontStyle: \"italic\",\r\n    margin: 10,\r\n    marginLeft: 0,\r\n  },\r\n  modalView: {\r\n    margin: 20,\r\n    backgroundColor: \"white\",\r\n    borderRadius: 20,\r\n    padding: 30,\r\n    shadowColor: \"#000\",\r\n    shadowOffset: {\r\n      width: 0,\r\n      height: 2,\r\n    },\r\n    shadowOpacity: 0.25,\r\n    shadowRadius: 3.84,\r\n    elevation: 5,\r\n  },\r\n  button: {\r\n    marginTop: 10,\r\n    marginLeft: 20,\r\n    marginRight: 20,\r\n    color: \"white\",\r\n    height: 40,\r\n    backgroundColor: \"#42A5F5\",\r\n    borderRadius: 20,\r\n  },\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    paddingTop: Constants.statusBarHeight,\r\n    padding: 8,\r\n    backgroundColor: \"#004D73\",\r\n  },\r\n  input: {\r\n    backgroundColor: \"white\",\r\n    height: 40,\r\n    padding: 10,\r\n    borderRadius: 4,\r\n    borderWidth: 1,\r\n    borderColor: \"#c8c8c8\",\r\n  },\r\n  textStyle: {\r\n    padding: 8,\r\n    color: \"white\",\r\n    fontWeight: \"bold\",\r\n    textAlign: \"center\",\r\n  },\r\n});\r\n\r\nconst FETCH_USER_QUERY = gql`\r\n  query getUser($userId: ID!) {\r\n    getUser(userId: $userId) {\r\n      firstName\r\n      lastName\r\n      points\r\n      fallPoints\r\n      springPoints\r\n      summerPoints\r\n      fallPercentile\r\n      springPercentile\r\n      summerPercentile\r\n      events {\r\n        name\r\n        category\r\n        createdAt\r\n        points\r\n      }\r\n      tasks {\r\n        name\r\n        points\r\n        startDate\r\n      }\r\n      bookmarkedTasks\r\n    }\r\n  }\r\n`;\r\n\r\nexport default TaskButton;\r\n"]},"metadata":{},"sourceType":"module"}