{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\nvar _jsxFileName = \"/Users/julia/SHPE-UF-MOBILE/Pages/ViewTasks.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  query ($userId: ID!) {\\n    getUser(userId: $userId) {\\n      firstName\\n      lastName\\n      points\\n      fallPoints\\n      springPoints\\n      summerPoints\\n      fallPercentile\\n      springPercentile\\n      summerPercentile\\n      events {\\n        name\\n        category\\n        createdAt\\n        points\\n      }\\n      tasks {\\n        name\\n        points\\n        startDate\\n      }\\n      bookmarkedTasks\\n    }\\n\\n\\n    getTasks {\\n      id\\n      name\\n      startDate\\n      endDate\\n      description\\n      points\\n      attendance\\n      semester\\n      createdAt\\n      users {\\n        firstName\\n        lastName\\n        username\\n        email\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Card, ListItem, Icon } from 'react-native-elements';\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scrollview';\nimport { useMutation, useQuery, gql } from \"@apollo/client\";\nimport { useForm, getErrors } from \"../util/hooks\";\n\nfunction ViewTasks() {\n  var _useQuery = useQuery(FETCH_USER_QUERY, {\n    variables: {\n      userId: \"5f90e4d4920bab09f6df0106\"\n    }\n  }),\n      loading = _useQuery.loading,\n      data = _useQuery.data,\n      error = _useQuery.error;\n\n  if (loading) return null;\n  if (error) return null;\n  var allTasks = data.getTasks;\n  var bookTasks = user.bookmarkedTasks;\n  var cards = [];\n  cards.push(React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, React.createElement(Card.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, \"BOOKMARKED TASKS\")));\n\n  for (var i = 0; i < bookTasks.length; i++) {\n    for (var j = 0; j < allTasks.length; j++) {\n      if (bookTasks[i] == allTasks[j].name) {\n        cards.push(React.createElement(Card, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 15\n          }\n        }, React.createElement(Card.Title, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 15\n          }\n        }, allTasks[j].name), React.createElement(Card.Divider, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 15\n          }\n        }), React.createElement(Text, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 17\n          }\n        }, \"Points: \", allTasks[j].points, React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 19\n          }\n        }), \" \", React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 26\n          }\n        }), allTasks[j].description)));\n      }\n    }\n  }\n\n  cards.push(React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, React.createElement(Card.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, \"UNBOOKMARKED TASKS\")));\n\n  for (var _i = 0; _i < bookTasks.length; _i++) {\n    for (var _j = 0; _j < allTasks.length; _j++) {\n      if (bookTasks[_i] != allTasks[_j].name) {\n        cards.push(React.createElement(Card, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }\n        }, React.createElement(Card.Title, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }\n        }, allTasks[_j].name), React.createElement(Card.Divider, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }\n        }), React.createElement(Text, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 17\n          }\n        }, \"Points: \", allTasks[_j].points, React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 19\n          }\n        }), \" \", React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 26\n          }\n        }), allTasks[_j].description)));\n      }\n    }\n  }\n\n  return cards;\n}\n\nvar FETCH_USER_QUERY = gql(_templateObject());\nexport default ViewTasks;","map":{"version":3,"sources":["/Users/julia/SHPE-UF-MOBILE/Pages/ViewTasks.js"],"names":["React","useState","Card","ListItem","Icon","KeyboardAwareScrollView","useMutation","useQuery","gql","useForm","getErrors","ViewTasks","FETCH_USER_QUERY","variables","userId","loading","data","error","allTasks","getTasks","bookTasks","user","bookmarkedTasks","cards","push","i","length","j","name","points","description"],"mappings":"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","sourcesContent":["import  React, {useState} from 'react';\nimport { TouchableWithoutFeedback, TextInput, StyleSheet, SafeAreaView, Keyboard, Button, Alert, Text, View} from 'react-native';\nimport { Card, ListItem, Icon } from 'react-native-elements'\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scrollview';\nimport { useMutation, useQuery, gql } from \"@apollo/client\";\nimport { useForm, getErrors } from \"../util/hooks\";\n\nfunction ViewTasks() {\n\n    const { loading, data, error } = useQuery(FETCH_USER_QUERY, {\n      variables: {\n        userId: \"5f90e4d4920bab09f6df0106\", // dummy user for now\n      },\n    });\n    if (loading) return null;\n    if (error) return null;\n\n      const allTasks = data.getTasks;\n      const bookTasks = user.bookmarkedTasks;\n\n      const cards = [];\n\n      // BOOKMARKED TASKS DISPLAYED HERE\n      cards.push(\n      <Card>\n      <Card.Title>BOOKMARKED TASKS</Card.Title>\n      </Card>\n      )\n      for (let i = 0; i<bookTasks.length; i++){\n        for (let j = 0; j<allTasks.length; j++){\n          if (bookTasks[i] == allTasks[j].name){\n            cards.push(\n              <Card>\n              <Card.Title>{allTasks[j].name}</Card.Title>\n              <Card.Divider/>{\n                <Text>\n                  Points: {allTasks[j].points}\n                  <br /> <br />\n                  {allTasks[j].description}\n                  </Text>\n              }\n              </Card>\n            )\n          }\n        }\n      }\n\n      // ALL UNBOOKMARKED TASKS DISPLAYED HERE\n      cards.push(\n      <Card>\n      <Card.Title>UNBOOKMARKED TASKS</Card.Title>\n      </Card>\n      )\n      for (let i = 0; i<bookTasks.length; i++){\n        for (let j = 0; j<allTasks.length; j++){\n          if (bookTasks[i] != allTasks[j].name){\n            cards.push(\n              <Card>\n              <Card.Title>{allTasks[j].name}</Card.Title>\n              <Card.Divider/>{\n                <Text>\n                  Points: {allTasks[j].points}\n                  <br /> <br />\n                  {allTasks[j].description}\n                  </Text>\n              }\n              </Card>\n            )\n          }\n        }\n      }\n\n\n\nreturn cards;\n}\n\n\nconst FETCH_USER_QUERY = gql`\n  query ($userId: ID!) {\n    getUser(userId: $userId) {\n      firstName\n      lastName\n      points\n      fallPoints\n      springPoints\n      summerPoints\n      fallPercentile\n      springPercentile\n      summerPercentile\n      events {\n        name\n        category\n        createdAt\n        points\n      }\n      tasks {\n        name\n        points\n        startDate\n      }\n      bookmarkedTasks\n    }\n\n\n    getTasks {\n      id\n      name\n      startDate\n      endDate\n      description\n      points\n      attendance\n      semester\n      createdAt\n      users {\n        firstName\n        lastName\n        username\n        email\n      }\n    }\n  }\n`;\nexport default ViewTasks;\n"]},"metadata":{},"sourceType":"module"}